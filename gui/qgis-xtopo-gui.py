#!/usr/bin/python3
import PySimpleGUI as sg
import subprocess
import sys
import webbrowser
import locale
import os
import configparser
import pyperclip
from contextlib import redirect_stdout
from shutil import which
from shutil import copyfile
from shutil import move
import ntpath
import time
import tempfile
import appdirs
import psutil

try:
    sys.path.append('../')
    import process_bbox
    import calc_srtm_tiles_list
except Exception:
    # PyInstaller creates a temp folder and stores path in _MEIPASS
    if hasattr(sys, "_MEIPASS2"):
        sys.path.append(sys._MEIPASS2)
        import process_bbox
        import calc_srtm_tiles_list


def is_tool(name):
    return which(name) is not None


def get_translations(lang):
    try:
        path = sys._MEIPASS + slash_str + 'translations_' + lang + '.txt'
    except Exception:
        path = os.path.dirname(os.path.abspath(__file__)) + slash_str + 'translations_' + lang + '.txt'
    config = configparser.ConfigParser(delimiters='=')
    if os.path.isfile(path):
        config.read(path, encoding='utf-8')
        translations = {k: v for k, v in config.items('main')}
    else:
        return {'': ''}
    return translations


if os.name == "nt":
    import winapps
if os.name == "posix":
    slash_str = "/"
    default_locale = locale.getlocale()[0][:2]
else:
    if os.name == "nt":
        import ctypes

        windll = ctypes.windll.kernel32
        default_locale = locale.windows_locale[windll.GetUserDefaultUILanguage()][:2]
        slash_str = "\\"
    else:
        default_locale = "en"
        slash_str = "/"
if default_locale.startswith("ua") or default_locale.startswith("by"):
    default_locale = "ru"
remote_repo_name = 'xmd5a2/qgis-xtopo:latest'
user_config_dir = appdirs.user_config_dir() + slash_str + "qgisxtopo"
user_config_filename = "settings.ini"
user_config_path = user_config_dir + slash_str + user_config_filename
r_keys = ['docker', 'external']
terrain_radio_keys = ['get_terrain_tiles', 'download_terrain_tiles', 'download_terrain_tiles_manually']
translations = get_translations(default_locale)
qgis_projects_dir_default = str(str(os.path.expanduser('~'))) + slash_str + "qgis_projects"
temp_dir = tempfile.gettempdir()
project_name_default = 'automap'
if not is_tool("docker"):
    sg.Popup(translations.get('docker_not_installed_error', 'Docker is not installed. Nothing will work.'),
             title=translations.get('error', 'Error'))
    exit(1)
else:
    docker_installed = True

osm_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6OTE5Q0NCRjgzMzBEMTFFQjk1NjhFQTJERDIzOUJCMkUiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6OTE5Q0NCRjkzMzBEMTFFQjk1NjhFQTJERDIzOUJCMkUiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo5MTlDQ0JGNjMzMEQxMUVCOTU2OEVBMkREMjM5QkIyRSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo5MTlDQ0JGNzMzMEQxMUVCOTU2OEVBMkREMjM5QkIyRSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PhubL60AAAlDSURBVHjafFZZjFzF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 '
klokantech_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAADrElEQVRIia1WO4/cVBT+zvW1vTOTnSEPQbQbiAQSmw0QJAqQIiGoaahIgSj4AVAgRJMOEVHQULN1KhASTdiGIgoCKUgRilgpu2FACRDQZLPv2Z2Hfc9HYXvG9sxuJo9TWPbxPd933rbgwrciCK0HAAQEqRBDEUwqzFAEThk5tQCePXzo6vuvT4wxqSz8evv85RsWgCdypBI8doKq7wEwIEDe9/RDCmkhyOf7859uNtfbSRInRgFASGrw0avPvfRkffDSltz/vtn6+e+19CGxIe/DN0AQAXBufiYlIEHace6MWBbaq5TSvL5kn0RQVqYPp44eOnVseujaAXUS6cVusdkaRc8Ixsk7p2c/fWN+X9CitHZ7M18ucpwfZkKIiaSILoA8EMGDNrMPnaIbQxAwrmjkU/NKJS9e/2uzGx2AWGNscmXow0QQU2UcMs6jB6CVQmjbvejC5ZUvflz6ePHa72s7iTJy2otSJwScYtQVz6czWaQe1EAtqZKjFZAkAWbKzW506Wbr4vU/7mzv3uv0rCcfvDY3d7T+w5+t9U7/vZdPJscMaekMdNBLQnikdWScy64SjgQwSFDgeSfqtacq4b87uxud/qWV/6yYpxu1q3fWn2lUBwQAhK4wRSCphgALBHTIuQFUfPPKTOPDs/MvHD8SeObeXu+75X8WrjWv3Lrb7g9LEpNaNCSggGWxORQgSZHh/APTgXn79Im2c1/9snJjdevubi+FyM6QiEkZ2SgKGAe6IocDHMniWIYe333x5Jnjh0NrCCipxTMEFHQcOpxk25a6m1mNS/pYubK6dWuz3Ykcs6VTyjggRTNyzLIDQAWJ3ByQaHfjz64sNde266Gth+kOboR+kYFZMAAgEAEsQKiOoDM/uCJ4oup/fe5sKSzJZ5wO5WQo1VnEcd5ZqBb4cmLkwK+CMl26+dKPT9FDCqEj2+oAgm+Wbv/W2pwQuxe7/Vahre7zYnl1a3l1ywIVkkBbBECNMGBXJL/zDFBllp9cWQKgQtph8YdxFR5IqKRKImn+4hc0yTqHtwMYArZThHxrbvb5Y3U8gszWq8lNBHQBa4sze/7NM4+CnhdDeKSpaGGmHqP4ZFVpSarqxl4P2c9JEs+E/10Dk9IVwF4UG1IanyyIIPA8AG1BBegDERACAUHQZFxKmqxJEidiQQRMEbuCaWJHUCO6Ah/wiQ7ZcWp3EhPnQqddz3Qye0d2CRXxya5JcQMtDw6BPaBjpAf4qhtiVBCSEdOPwf9p8DEyjKNFWAAAAABJRU5ErkJggg=='
protomaps_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NjkzQUQ5ODEzOTgxMTFFQjhCMjVFRTA5NEI4ODE3RUIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NjkzQUQ5ODIzOTgxMTFFQjhCMjVFRTA5NEI4ODE3RUIiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo2OTNBRDk3RjM5ODExMUVCOEIyNUVFMDk0Qjg4MTdFQiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo2OTNBRDk4MDM5ODExMUVCOEIyNUVFMDk0Qjg4MTdFQiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pj0JpZgAAAAkUExURQDGieL7+ADfvQDVqADNmOn8+QDMmMr587L27gDr1GPv3f///49T4pwAAAAMdFJOU///////////////ABLfzs4AAAB1SURBVHjazJPBDsAgCEMbJF72//+7ZNEJtovzZk8EXhCl4loI5wEOwL8BdGnAMeQCKIgqDCCLAEATM5AiAczhACyMVp/YMlBCMsL/j2hZextg+5rLh2qzd1WxLNkgrVvVt/xAa1CWozqZdq6zq3H+z2LdAgwAqO4hgIzSh/gAAAAASUVORK5CYII='
geofabrik_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAD6AAAA+gBtXtSawAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAHKSURBVFiF7Ze9ThtBFIXPrJEjYX4U5ceAhNLQwBMkVSyQeAZeIFUkHgd6EAXiHZBoUZoUKdKmQFSQIiAFef2l8Aguw+zOju1gKcpXjfbePfd4Z+futfSfMQC6QHdaxZd4YGkaBm6MgZvnLt7jKb1RtNwIxVuS7iQVQWggqe2cK3P0QpEm/K64r/CxLJIGgFdA4dezklo16S2fI6AA3uYaihk4jux3U/YmYWCzQvzQv4yvgVXgE3Ae5GxMwsBuINpO5Fs+j1O4BfSN2B3gTPxH5Kl8jVzrMzw5WcV7QBkIbZn4UXRTqimBj00Kd3nc4e4xOR8yi1t+EXw7CiP8RtKlpNmEzx2z/uICJF3X3NuRdOlrPTag+vNtyep0FcRrASvAbWIL3pvLA4YvWd/Er2q24BZYTtoDtry4Zc3ET2sMxgyUwGbWM+LpMbwwMUdwSmoM5B/DwIhtRD8b5FsDyUbU5Gv4zawXvfB34B3QAdrAHLAOHEh6afLPGujXA5xE9rQp+5MwMI9vwf4Xp+j4XAcspPRHmYj6qu4ZpXNuJkdvlInohYbjV8jAx7LINuBnvu1IaDt3HhwLpjmWewPLxkC6vf4lE9P7a/bP8AfZbZpEyyeEigAAAABJRU5ErkJggg=='
extract_bbike_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAD6AAAA+gBtXtSawAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAGuSURBVFiF7ZY/S1tRGMZ/byNSLDU1KJQuVidxyNBJA4FCdqdgP0DXfgOpfoE6CA5GtNCSDyAudipIt04u4j9KLR2yZQkqFJOnQ+6Q4D0nyfXcOLTPdM95n/e8Pzh/7gv/uixuUtITYLTPNRpmdhsOqQ3wSYOpJem3pK+SPkgqSXo0TIA4HUsq9aqVnLK35oEvksoPBQAwAlQkTfoMg2oTuOoY54AiMOfw54AysNV3hR5n4HmMPyOp4smpumoF2QIzawKrHssd6KAAkepA0xFrDANgEcg4YmeupCSHsEuSngKvgQ2HpQV8DAlwKqkVfWeA8R7+NTM7DwmQ7dNXA96b2a7PlOZDdANkJXl/amkCzALrwKGkZy5Tki2oAtcd4wlgGnjlWG8B+Aws9V1h0JcwypmRdOTJK8blBdsCM/sJvPVYllMFiHRE9/Z0Kj8MAHlisdc3NEAeGHPE6qkCSHoBbHssF3GTSa7hiqTOhmQKeAkUgMeevP1QAO8S5HwHDuICafeEAD+AN2bWigumCdAEdoCCmV26TPfuByL9od2o/gJOgG/AnpnVAq3/X+npL1QIXJA1CyYHAAAAAElFTkSuQmCC'
osm_sbin_logo = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAD6AAAA+gBtXtSawAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAH2SURBVFiF5Ze9ThRRGIbfsxegCZBoIhRg46ImGyCBhAavgNpEWzR0xsvQmxBjvxvo4BIgQPiJDcFCIOuyFlb8hH0s5owZZ2e++WGAgjeZYvZ878/JzpnvG+m+wxUpBpyk55JeSBr0lyR1/bUrac85R5UhBUwC34A22Wj72okqjEeAFaCXwziOHrAMDJc1nwVOShjH0QFeFTWfAc4qMA9xBswkefU9hMBjSeuSnhgZ9yW1JB34+6eS5iWNG5wjSZPOuXbW7r8aO7kA3hGchjjPAQvAucFfyjIfAy4NgTemQKDx2uBfAqMW+bNBXs4yj+g0DZ1PFnHbIOZ+koE5Q2czjTQIXKWQukCtQIAawfFLwhUwENZGReux+yi2nHO9vAF87VbKck3Ss6QAA/21//Ajr3kEh8baUFKAoYTCEH9KBLA4YRP7L4DVwartbhG9aICuQXhYwuSBsfa7aID0l0c6xoy1Tt8vd3UM48RbfxHFd7Vq6H7MG0DSB2NtLXWF7Gb0NsuZ6zQjL7BkCFwAi6S34/e+Jg1f4rwkoUeSNmQPJN8lNdU/kNQNzk9JU5kDiQ9xEyPZdKZxLMQscFyB+S+KDqWREMNAi/JjeQuw/srcQRoEs2KeMf3E1zbyaBf6NPNhxiW9VNDRwg56quBVvuOc2y+qeb/xF1MN0lEAs5v5AAAAAElFTkSuQmCC'
logo_icon = b''
reset_img = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAD6AAAA+gBtXtSawAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAJSSURBVFiF5Zc7b1NBEIXP2ggRowCJUCRAFEADJYI/ECnkQZqIFJbgPxBFiB9AQU+BQER0VBQUBBTRBEiPnCAg5lVRRFQgMCYQDB/FXcvLeu/Dvo4bTmPvzs6cM7t7586VthFAIW1N6oIc5COSFrYrfpNkABgCTMB2nQjTvSIrABPANaAKbNJCw87dBiaBY8APa3sP7MpDbIBZ4AXZ8dUbX+mWfBC41wFxHH4CJ0IcbWfnkB+RtCTpeMBcl1SRtCHpt6SDkk5JGkzIZ0XSqDGGLJkPA68DmTwDZoCBgM9O4HLKTlxIJbfBHnmOv4CLBG6757ecIuAjMJRGXg6Qn80g+kwKeRM3XL8dXpCCpKte7EvGmKU0AZJOS7ojaVNSQ1LNzn+2vzU7XwcKxpg/oSzGPbVrZCinPQNwyxMw0zdyK+ClQ/6NPBWsC3JDVFKbWOkHr3u+eyUVnfFGvwUUE2y5ANz17ta+EMknSVvO+ECvBCgq1U1sSfoSp7TqXcK2ktspgBJQd+K+cu3+Nj92/u+WNJlXgKQpSSVn/CR2JTDlnVUlTyEiamJWvZgTSQ4GWPcc5nIImPdirZPyQhNw3nPK9DIKxJm2vi7KWZ3vB0TMZTkOu+3zAfIHnagfAd7QjgpwjnBDUiLqHdcCflVgf4grqSU7LOmppKMB83e1WjJJOiTppP697U28kzRmjPmQmHWMiGFgMZBRVjzEqXpdgejJKBPuEePwFpjNRRwQUgTGgJvAc1ofHhC13avAAjBKB7Uj+ZlMESRpjx3WjDGNbmP93/gLEKELTLZ4x9gAAAAASUVORK5CYII='

sg.theme('DarkGreen6')
layout = [
    [sg.Text('QGIS-xtopo', font='Any 20 bold', text_color="#CAF1C1")] +
    [sg.Column([[]], size=(320, 50), pad=(0, 0))] +
    [sg.Column([
        [sg.Text(translations.get('free', 'Free') + ":", key="free_space_text", justification='right', text_color='#9BFF80',
                 size=(10, 1), pad=(0, 0),
                 tooltip=translations.get('free_space_tooltip', 'Free space on selected disk drive')),
         sg.Text('', key="free_space", text_color='#9BFF80',
                 size=(12, 1), pad=(0, 0))
         ]
    ], size=(160, 35), pad=(5, 5))] +
    [sg.Column(
        [
            [sg.Button('', key="reset", image_data=reset_img,
                       tooltip=translations.get('reset_tooltip', 'Reset settings'), visible=True)] +
            [sg.Button('RU', key="button_ru", font='Any 13', button_color=('white', '#497E90'), visible=True)] +
            [sg.Button('EN', key="button_en", font='Any 13', button_color=('white', '#497E90'), visible=False)]
        ], size=(135, 40))
    ],
    [sg.Text(translations.get('qgis_projects_dir', 'QGIS projects directory'), key="qgis_projects_dir_text",
             size=(22, 1), justification='l',
             tooltip=translations.get('qgis_projects_dir_tooltip', 'Directory with your projects')),
     sg.Input(key='qgis_projects_dir', default_text=qgis_projects_dir_default,
              size=(60, 1),
              tooltip=translations.get('qgis_projects_dir_tooltip', 'Directory with your projects'),
              change_submits=True, disabled=True)] +
    [sg.FolderBrowse(button_text=translations.get('browse', 'Browse'), key='qgis_projects_dir_browse', size=(10, 1),
                     tooltip=translations.get('qgis_projects_dir_browse_tooltip', 'Select projects directory'))],
    [sg.Text(translations.get('project_name', 'Project name'), key='project_name_text', size=(22, 1),
             justification='l', tooltip=translations.get('project_name_tooltip', 'Enter project name')),
     sg.Input(default_text=project_name_default, key='project_name', size=(60, 1),
              tooltip=translations.get('project_name_tooltip', 'Enter project name'))],
    [sg.Text(translations.get('bounding_box', 'Bounding box'), key='bbox_text', size=(22, 1), justification='l',
             tooltip=translations.get('bounding_box_tooltip', 'Bounding box or OSM url')),
     sg.Input(default_text='', key='bbox', size=(60, 1),
              tooltip=translations.get('bounding_box_tooltip', 'Bounding box or OSM url'), change_submits=True,
              right_click_menu=['&Right', ['Paste bbox', 'Clear']])] +
    [sg.Button(key="open_osm", image_data=osm_logo, size=(32, 32),
               tooltip=translations.get('open_osm_tooltip',
                                        'Press button, find a location and copy URL. Then paste it to text field to the left.'))
     ] +
    [sg.Button(key="open_klokantech", image_data=klokantech_logo, size=(32, 32),
               tooltip=translations.get('open_klokantech_tooltip',
                                        'Draw a rectangle and copy bounding box in CSV format. Then paste it to '
                                        'text field to the left.'))
     ],
    [sg.Frame(layout=[
        [sg.Text(
            translations.get('osm_data_source', 'OSM data source') + ": " + translations.get('overpass_instance',
                                                                                             'Overpass server'),
            key="osm_data_source_text",
            font="default 11 bold", text_color="#CAF1C1",
            tooltip=translations.get('osm_data_source_tooltip',
                                     'Select the type of server for receiving OSM data'), justification='l')],
        [sg.Text(translations.get('internal', 'Internal'), key="internal_text",
                 tooltip=translations.get('internal_tooltip',
                                          'Located inside docker container'),
                 size=(16, 1), justification='l')] +
        [sg.Radio('', "RADIO1", key=r_keys[0], change_submits=True, default=True)] +
        [sg.Button(key="open_geofabrik", image_data=geofabrik_logo, size=(32, 32), disabled=True,
                   tooltip=translations.get('open_geofabrik_tooltip',
                                            'Download already prepared OSM extract(s) and select it with button to the right.'))
            ,
         sg.Button(key="open_extract_bbike", image_data=extract_bbike_logo, size=(32, 32), disabled=True,
                   tooltip=translations.get('open_extract_bbike_tooltip',
                                            'Download selected area and select it with button to the right.'))
            ,
         sg.Button(key="open_osm_sbin", image_data=osm_sbin_logo, size=(32, 32), disabled=True,
                   tooltip=translations.get('open_osm_sbin_tooltip',
                                            'Data for Russia and surroundings'))
            ,
         sg.Button(key="open_protomaps", image_data=protomaps_logo, size=(32, 32), disabled=True,
                   tooltip=translations.get('open_protomaps_tooltip',
                                            'Draw a rectangle, download OSM extract and select it with button to the right.'))
         ] +
        [sg.Input(key='osm_files', disabled=True,
                  tooltip=translations.get('osm_data_files_tooltip', 'OSM data files list'), size=(37, 1)),
         sg.FilesBrowse(
             file_types=(("pbf", "*.pbf"), ("o5m", "*.o5m"), ("osm xml", "*.osm"), ("osm xml in bz2", "*.osm.bz2")),
             key='select_osm_files', button_text=translations.get('browse', 'Browse'), size=(10, 1),
             tooltip=translations.get('select_osm_data_files_tooltip',
                                      'Select OSM data files you want to use as source data'))],
        [sg.Text(translations.get('external', 'External'), key="external_text",
                 tooltip=translations.get('external_tooltip',
                                          'Located in Internet'),
                 size=(16, 1), justification='l')] +
        [sg.Radio('', "RADIO1", key=r_keys[1], change_submits=True)] +
        [sg.Input(key='overpass_endpoint_external', default_text="https://overpass.kumi.systems/api/interpreter",
                  size=(60, 1), tooltip=translations.get('overpass_endpoint_external_tooltip',
                                                         'External Overpass endpoint'),
                  disabled=True)]
    ], title='', element_justification="left",
        border_width=1,
        relief=sg.RELIEF_SUNKEN)],
    [sg.Frame(layout=[
        [sg.Text(
            translations.get('terrain', 'Terrain'),
            key="terrain",
            font="default 11 bold", text_color="#CAF1C1", justification='l')],
        [sg.Text(translations.get('calc_tiles_list', 'List of required terrain tiles'), key="calc_tiles_list_text",
                 size=(21, 1), justification='l', text_color='#D1D4C6'),
         sg.Input(key='calc_tiles_list',
                  size=(60, 1), tooltip=translations.get('calc_tiles_list_tooltip',
                                                         'Automatically calculated list of required terrain tiles'),
                  readonly=True)] +
        [sg.Text(translations.get('total', 'Total') + ": ", key="total_text", text_color="#D1D4C6",
                 size=(5, 1), justification='l'),
         ] +
        [sg.Text('', key="total_tiles_value", text_color="#CAF1C1",
                 size=(3, 1), justification='l'),
         ],
        [sg.Text(translations.get('generate_terrain', 'Process terrain'),
                 key='generate_terrain_text', size=(22, 1), justification='l')] +
        [sg.Checkbox('', key="generate_terrain", size=(10, 1), default=False, change_submits=True)],
        [sg.Text(translations.get('download_terrain_tiles', 'Download terrain automatically'),
                 key='download_terrain_tiles_text', text_color="#B6B4C3",
                 size=(30, 1), justification='l',
                 tooltip=translations.get('download_terrain_tiles_tooltip',
                                          'Automatically download SRTM30m terrain data for chosen area'))] +
        [sg.Radio('', "RADIO2", key=terrain_radio_keys[1], change_submits=True, size=(1, 1))],
        [sg.Text(translations.get('download_terrain_tiles_manually', 'Download terrain manually'),
                 key='download_terrain_tiles_manually_text', text_color="#B6B4C3",
                 size=(30, 1), justification='l',
                 tooltip=translations.get('download_terrain_tiles_manually_tooltip',
                                          'Please manually download terrain data for chosen area'))] +
        [sg.Radio('', "RADIO2", key=terrain_radio_keys[2], change_submits=True, size=(1, 1))] +
        [sg.Input(key='terrain_input_dir',
                  size=(45, 1), readonly=True)] +
        [sg.Button(key="open_terrain_input_dir", size=(10, 1), button_text=translations.get('open', 'Open'),
                   disabled=True, tooltip=translations.get('open_terrain_input_dir_tooltip',
                                                           'Open directory where downloaded terrain tiles should be located'))
         ],
        [sg.Text(translations.get('use_terrain_src_dir', 'Use terrain source directory'),
                 key='use_terrain_src_dir_text',
                 size=(30, 1), text_color="#B6B4C3",
                 justification='l',
                 tooltip=translations.get('use_terrain_src_dir_tooltip',
                                          'Use directory with world/continent terrain')),
         sg.Radio('', "RADIO2", key=terrain_radio_keys[0], change_submits=True, size=(1, 1)),
         # sg.Checkbox('', key="get_terrain_tiles", size=(1, 1), default=False, change_submits=True),
         sg.Input(default_text='', key='terrain_src_dir', size=(45, 1),
                  tooltip=translations.get('use_terrain_src_dir_tooltip',
                                           'Use directory with world/continent terrain'), disabled=True)] +
        [sg.FolderBrowse(button_text=translations.get('browse', 'Browse'), key='terrain_src_dir_browse',
                         size=(10, 1), disabled=True,
                         tooltip=translations.get('terrain_src_dir_browse_tooltip',
                                                  'Select directory'))]

        # [sg.Checkbox('', key="download_terrain_tiles", size=(10, 1), default=False, disabled=True,
        #              change_submits=True)]
    ], title='', element_justification="left",
        border_width=1,
        relief=sg.RELIEF_SUNKEN)]
]
layout += [[sg.Text(translations.get('constructed_command_line', 'Command line') + ":",
                    key='constructed_command_line_text')],
           [sg.Text(size=(105, 6), key='command_line', text_color='yellow', font='Courier 8',
                    right_click_menu=['&Right', ['Copy']])],
           [sg.MLine(size=(105, 10), reroute_stdout=True, reroute_stderr=True, reroute_cprint=True, write_only=True,
                     font='Courier 8', autoscroll=True, key='-ML-')],
           [sg.Frame(layout=[
               [sg.Checkbox('', key="run_chain", size=(1, 1), default=True, visible=False)] +
               [sg.Button(translations.get('start', 'Run everything'), button_color=('white', '#05710F'),
                          key="start",
                          tooltip=translations.get('start_tooltip', 'Initialize project'), disabled=True,
                          size=(13, 1))
                ]], title='', element_justification="left",
               border_width=1,
               relief=sg.RELIEF_SUNKEN)] +
           [sg.Frame(layout=[
               [sg.Button(translations.get('populate_db', 'Populate DB'), key="populate_db",
                          tooltip=translations.get('populate_db_tooltip',
                                                   'Populate Overpass database (populate_db)'), size=(13, 1),
                          disabled=True),
                sg.Button(translations.get('prepare_data', 'Prepare data'), key="prepare_data",
                          tooltip=translations.get('prepare_data_tooltip',
                                                   'Prepare data for project (prepare_data)'), size=(16, 1),
                          disabled=True),
                sg.Button(translations.get('open_qgis', 'Open QGIS'), key="open_qgis", disabled=True,
                          tooltip=translations.get('open_qgis_tooltip', 'Open QGIS with your project (exec_qgis)'),
                          size=(13, 1))
                ]], title='', element_justification="left",
               border_width=1,
               relief=sg.RELIEF_SUNKEN)] +
           [sg.Button(translations.get('exit', 'Exit'), key="exit", size=(10, 1))]
           ]

window = sg.Window('QGIS-xtopo-GUI', layout, finalize=True, icon=logo_icon, location=(200, 100))


def main():
    global translations
    if default_locale == 'ru':
        window.Elem('button_ru').update(visible=False)
        window.Elem('button_en').update(visible=True)
    if default_locale == 'en':
        window.Elem('button_ru').update(visible=True)
        window.Elem('button_en').update(visible=False)

    qgis_projects_dir_read = read_user_config("qgis_projects_dir")
    if qgis_projects_dir_read:
        window.Elem('qgis_projects_dir').update(qgis_projects_dir_read)

    timer_running, counter = True, 0
    i = 0
    while True:
        event, values = window.read(timeout=300)
        if i == 0:
            config_dir = values["qgis_projects_dir"] + slash_str + "qgisxtopo-config"
            if docker_installed:
                print(translations.get("pulling_image", "Pulling image from DockerHub"))
                runCommand(cmd="docker pull " + remote_repo_name, window=window)
                if remote_repo_name[0:remote_repo_name.rfind(":")] in str(
                        subprocess.check_output(['docker', 'image', 'ls'], stdin=subprocess.PIPE,
                                                stderr=subprocess.STDOUT)):
                    window.Elem('start').update(disabled=False)
                    if values[r_keys[1]]:
                        window.Elem('populate_db').update(disabled=True)
                    window.Elem('prepare_data').update(disabled=False)
                    window.Elem('open_qgis').update(disabled=False)
            read_config_update_ui(values, config_dir, True)
            window.Elem('free_space').update(
                str(get_free_space(values["qgis_projects_dir"])) + " " + translations.get('gb', 'Gb'))
            update_free_text_color(values)
            i += 1
        if event in (sg.WIN_CLOSED, 'exit'):
            break

        if timer_running:
            params = compose_params(values, values['run_chain'])
            command = command_to_run + params
            window['command_line'].update(command)
            if len(values['osm_files']) > 0:
                window.Elem('populate_db').update(disabled=False)
            else:
                window.Elem('populate_db').update(disabled=True)
        if event == 'reset':
            window.Elem('qgis_projects_dir').update(qgis_projects_dir_default)
            window.Elem('project_name').update(project_name_default)
            config_path = values["qgis_projects_dir"] + slash_str + "qgisxtopo-config" + slash_str + "config.ini"
            try:
                os.remove(config_path)
            except FileNotFoundError:
                pass
            copy_config_original(temp_dir)
            if os.path.isfile(temp_dir + slash_str + "config.original"):
                copyfile(temp_dir + slash_str + "config.original", config_path)
            read_config_update_ui(values, values["qgis_projects_dir"] + slash_str + "qgisxtopo-config", False)
        if event == 'button_ru':
            translations = get_translations("ru")
            update_layout_translations(values)
            window.Elem('button_ru').update(visible=False)
            window.Elem('button_en').update(visible=True)
        if event == 'button_en':
            translations = get_translations("en")
            update_layout_translations(values)
            window.Elem('button_ru').update(visible=True)
            window.Elem('button_en').update(visible=False)
        if event == 'bbox':
            update_layout_calc_tiles_list(values['bbox'])
        if event == 'Paste bbox':
            clipboard_contents = pyperclip.paste()
            window.Elem('bbox').update(clipboard_contents)
            update_layout_calc_tiles_list(clipboard_contents)
        if event == 'Clear':
            window.Elem('bbox').update('')
            window.Elem('calc_tiles_list').update('')
            window.Elem('total_tiles_value').update('')
        if event == 'qgis_projects_dir':
            try:
                os.mkdir(values['qgis_projects_dir'] + slash_str + "test")
                os.rmdir(values['qgis_projects_dir'] + slash_str + "test")
            except Exception:
                window.Elem('qgis_projects_dir').update('')
                sg.Popup(translations.get('qgis_projects_dir_not_writable', 'QGIS projects directory is not writable. Choose another directory.'), title=translations.get('Error', 'Error'))
                continue
            update_user_config('qgis_projects_dir', values['qgis_projects_dir'])
            config_dir = values["qgis_projects_dir"] + slash_str + "qgisxtopo-config"
            read_config_update_ui(values, config_dir, True)
            window.Elem('free_space').update(
                str(get_free_space(values["qgis_projects_dir"])) + " " + translations.get('gb', 'Gb'))
            update_free_text_color(values)
            window.Elem('terrain_input_dir').update(get_terrain_input_dir(values))
        if event == 'open_osm':
            webbrowser.open(r'https://www.openstreetmap.org')
        if event == 'open_klokantech':
            webbrowser.open(r'https://boundingbox.klokantech.com')
        if event == 'open_protomaps':
            webbrowser.open(r'https://protomaps.com/extracts')
        if event == 'open_geofabrik':
            webbrowser.open(r'http://download.geofabrik.de')
        if event == 'open_extract_bbike':
            webbrowser.open(r'https://extract.bbbike.org/')
        if event == 'open_osm_sbin':
            webbrowser.open(r'http://osm.sbin.ru/osm_dump/')
        if event == 'generate_terrain':
            switch_layout_terrain(values['generate_terrain'])
            if values['generate_terrain'] and values[terrain_radio_keys[0]]:  # 'get_terrain_tiles'
                window.Elem('terrain_src_dir').update(disabled=False)
                window.Elem('terrain_src_dir_browse').update(disabled=False)
            if values['generate_terrain'] and values[terrain_radio_keys[2]]:  # 'download_terrain_tiles_manually'
                window.Elem('open_terrain_input_dir').update(disabled=False)
        if event == terrain_radio_keys[0]:  # 'get_terrain_tiles':
            if values[terrain_radio_keys[0]]:
                window.Elem('terrain_src_dir').update(disabled=False)
                window.Elem('terrain_src_dir_browse').update(disabled=False)
                window.Elem('open_terrain_input_dir').update(disabled=True)
            else:
                window.Elem('terrain_src_dir').update(disabled=True)
                window.Elem('terrain_src_dir_browse').update(disabled=True)
        if event == terrain_radio_keys[1] or event == terrain_radio_keys[
            2]:  # 'download_terrain_tiles' or 'download_terrain_tiles_manually'
            if values[terrain_radio_keys[1]] or values[terrain_radio_keys[2]]:
                window.Elem('terrain_src_dir').update(value='', disabled=True)
                window.Elem('terrain_src_dir_browse').update(disabled=True)
                window.Elem('open_terrain_input_dir').update(disabled=True)
            else:
                window.Elem('terrain_src_dir').update(disabled=False)
                window.Elem('terrain_src_dir_browse').update(disabled=False)
        if event == terrain_radio_keys[2]:  # 'download_terrain_tiles_manually'
            if values[terrain_radio_keys[2]]:
                window.Elem('open_terrain_input_dir').update(disabled=False)
            else:
                window.Elem('open_terrain_input_dir').update(disabled=True)
        if event == 'open_terrain_input_dir':
            terrain_input_dir = get_terrain_input_dir(values)
            webbrowser.open(os.path.realpath(terrain_input_dir))
        if event == 'Copy':
            if command:
                pyperclip.copy(command)
        if event == r_keys[0]:
            window.Elem('select_osm_files').update(disabled=False)
            window.Elem('open_protomaps').update(disabled=False)
            window.Elem('open_geofabrik').update(disabled=False)
            window.Elem('open_extract_bbike').update(disabled=False)
            window.Elem('open_osm_sbin').update(disabled=False)
            window.Elem('populate_db').update(disabled=False)
            window.Elem('overpass_endpoint_external').update(disabled=True)
        if event == r_keys[1]:
            window.Elem('select_osm_files').update(disabled=True)
            window.Elem('open_protomaps').update(disabled=True)
            window.Elem('open_geofabrik').update(disabled=True)
            window.Elem('open_extract_bbike').update(disabled=True)
            window.Elem('open_osm_sbin').update(disabled=True)
            window.Elem('populate_db').update(disabled=True)
            window.Elem('overpass_endpoint_external').update(disabled=False)
        project_dir = values["qgis_projects_dir"] + slash_str + values["project_name"]
        osm_data_dir = project_dir + slash_str + "osm_data"
        if event == 'populate_db':
            if check_parameters(values, osm_data_dir) is False:
                continue
            start(values, False)
            if not check_osm_data_is_present(osm_data_dir):
                webbrowser.open(os.path.realpath(osm_data_dir))
            if os.name == "posix":
                terminal_command_params_list = get_terminal_command_params_list(
                    'docker exec -it --user user qgis-xtopo /app/populate_db.sh', '', True)
                subprocess.Popen(terminal_command_params_list).wait()
            else:
                if os.name == "nt":
                    subprocess.Popen(
                        ['cmd', '/c start cmd /k docker exec -it --user user qgis-xtopo /app/populate_db.sh'],
                        shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if event == 'prepare_data':
            if check_parameters(values, osm_data_dir) is False:
                continue
            start(values, False)
            if os.name == "posix":
                terminal_command_params_list = get_terminal_command_params_list(
                    'docker exec -it --user user qgis-xtopo /app/prepare_data.sh', '', True)
                subprocess.Popen(terminal_command_params_list).wait()
            else:
                if os.name == "nt":
                    subprocess.Popen(
                        ['cmd', '/c start cmd /c docker exec -it --user user qgis-xtopo /app/prepare_data.sh'],
                        shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if event == 'open_qgis':
            start(values, False)
            run_qgis()
        if event == 'start':
            if check_parameters(values, osm_data_dir) is False:
                continue
            start(values, values["run_chain"])

    window.close()


command_to_run = r'docker '


def update_free_text_color(values):
    if get_free_space(values["qgis_projects_dir"]) > 10:
        window.Elem('free_space').update(text_color='#9BFF80')
        window.Elem('free_space_text').update(text_color='#9BFF80')
    else:
        if 5 <= get_free_space(values["qgis_projects_dir"]) <= 10:
            window.Elem('free_space').update(text_color='yellow')
            window.Elem('free_space_text').update(text_color='yellow')
        else:
            window.Elem('free_space').update(text_color='red')
            window.Elem('free_space_text').update(text_color='red')


def get_free_space(dir):
    return round((psutil.disk_usage(dir).free) / 1024 / 1024 / 1024, 1)


def update_user_config(setting, value):
    if not os.path.isdir(user_config_dir):
        try:
            os.mkdir(user_config_dir)
        except Exception:
            print("Can't create user config directory " + user_config_dir)
        if value:
            filedata = []
            filedata.append(setting + "=" + value)
            filedata = list_to_string_file(filedata)
            with open(user_config_path, 'w') as file:
                file.write(filedata)
    else:
        if os.path.isfile(user_config_filename):
            try:
                with open(user_config_filename, 'r') as fil:
                    filedata = fil.read().splitlines()
            except FileNotFoundError:
                pass
            for i in range(len(filedata)):
                if setting in filedata[i]:
                    filedata[i] = setting + "=" + value
                    break
                if i == len(filedata) - 1:
                    filedata.append(setting + "=" + value)
            filedata = list_to_string_file(filedata)
            with open(user_config_filename, 'w') as file:
                file.write(filedata)


def read_user_config(setting):
    value = ''
    if os.path.isfile(user_config_dir + slash_str + user_config_filename):
        try:
            with open(user_config_path, 'r') as fil:
                filedata = fil.read().splitlines()
        except Exception:
            print("Can't read user config " + user_config_path)

        for i in range(len(filedata)):
            if setting in filedata[i]:
                value = filedata[i].split("=")
                value = value[1]
                break
    return value


def get_terrain_input_dir(values):
    return values["qgis_projects_dir"] + slash_str + values["project_name"] + slash_str + "input_terrain"


def update_layout_calc_tiles_list(bbox):
    with redirect_stdout(None):
        bbox_c = process_bbox.prepare_bbox(bbox)
        srtm_tiles_list = calc_srtm_tiles_list.calc_srtm_tiles_list(bbox_c)
    srtm_tiles_list_size = len(srtm_tiles_list.split(" "))
    window.Elem('calc_tiles_list').update(srtm_tiles_list)
    if srtm_tiles_list:
        window.Elem('total_tiles_value').update(srtm_tiles_list_size)
    else:
        window.Elem('calc_tiles_list').update(translations.get('invalid_bbox_error',
                                                               'Invalid bbox format. Use openstreetmap.org link or comma separated left,bottom,right,top'))
        window.Elem('total_tiles_value').update("")
    if srtm_tiles_list_size >= 8:
        window.Elem('total_tiles_value').update(text_color='red')
        window.Elem('total_text').update(text_color='red')
    else:
        if 4 < srtm_tiles_list_size < 8:
            window.Elem('total_tiles_value').update(text_color='orange')
            window.Elem('total_text').update(text_color='orange')
        else:
            window.Elem('total_tiles_value').update(text_color="#D1D4C6")
            window.Elem('total_text').update(text_color="#D1D4C6")


def check_osm_data_is_present(osm_data_dir):
    for filename in os.listdir(osm_data_dir):
        if filename.endswith('.osm'):
            return True
        if filename.endswith('.o5m'):
            return True
        if filename.endswith('.osm.bz2'):
            return True
        if filename.endswith('.pbf'):
            return True
    return False


def check_terrain_data_is_present(terrain_dir):
    for filename in os.listdir(terrain_dir):
        if filename.endswith('.tif'):
            return True
        if filename.endswith('.zip'):
            return True
        if filename.endswith('.hgt'):
            return True
    return False


def run_qgis():
    if os.name == "posix":
        if is_tool("xhost"):
            runCommand(cmd="xhost +local:docker", window=window)
            runCommand(cmd="docker exec --user user qgis-xtopo /app/exec_qgis.sh", window=window)
        else:
            sg.Popup(
                'xhost' + " " + translations.get('not_installed', 'is not installed'),
                title=translations.get('error', 'Error'))
    else:
        if os.name == "nt":
            vcxsrv_dir = ''
            for app in winapps.search_installed('VcXsrv'):
                vcxsrv_dir = app.uninstall_string[1:app.uninstall_string.rfind('\\')] + "\\"
            if not vcxsrv_dir and os.path.isfile("c:\\Program Files\\VcXsrv\\vcxsrv.exe"):
                vcxsrv_dir = "c:\\Program Files\\VcXsrv\\"
            vcxsrv_path = vcxsrv_dir + "vcxsrv.exe"
            if os.path.isdir(vcxsrv_dir):
                if "vcxsrv.exe" not in str(
                        subprocess.check_output('tasklist', stdin=subprocess.PIPE, stderr=subprocess.STDOUT)):
                    subprocess.Popen(
                        [vcxsrv_path, "-multiwindow", "-clipboard", "-wgl"], shell=True,
                        stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                if "vcxsrv.exe" in str(
                        subprocess.check_output('tasklist', stdin=subprocess.PIPE, stderr=subprocess.STDOUT)):
                    runCommand(
                        cmd="docker exec -e DISPLAY=host.docker.internal:0.0 --user user qgis-xtopo /app/exec_qgis.sh",
                        window=window)
            else:
                sg.Popup('VcXsrv X Server' + " " + translations.get('not_installed',
                                                                    'not installed') + ". " + translations.get(
                    'get_it_from', 'Get it from') + " https://sourceforge.net/projects/vcxsrv/",
                         title=translations.get('error', 'Error'))


def list_to_string_file(list_str):
    str1 = ""
    for i in list_str:
        str1 += i + "\n"
    return str1


def start(values, run_chain):
    if docker_installed:
        runCommand("docker rm -f qgis-xtopo", window)
    params = compose_params(values, run_chain)
    command = command_to_run + params
    runCommand(cmd=command, window=window)

    osm_data_dir = values["qgis_projects_dir"] + slash_str + values["project_name"] + slash_str + "osm_data"
    osm_files_list = str(values['osm_files']).split(";")
    if values[r_keys[0]] and osm_files_list[0]:
        print(translations.get('copying_files', 'Copying file(s)') + " " + str(osm_files_list) + " " + translations.get(
            'to', 'to') + " " + osm_data_dir)
        for file in osm_files_list:
            copyfile(file, osm_data_dir + slash_str + ntpath.basename(file))
    with redirect_stdout(None):
        bbox_c = process_bbox.prepare_bbox(values['bbox'])
        srtm_tiles_list = calc_srtm_tiles_list.calc_srtm_tiles_list(bbox_c)
    if len(srtm_tiles_list.split(" ")) > 10:
        sg.Popup(translations.get('bounding_box_too_large', 'Bounding box is too large. Creating a map will take a '
                                                            'long time'), title=translations.get('warning', 'Warning'))

    init_docker(run_chain)
    config = values["qgis_projects_dir"] + slash_str + "qgisxtopo-config" + slash_str + "config.ini"
    if values['terrain_src_dir']:
        for v in range(0, 5):
            try:
                with open(config, 'r') as fil:
                    filedata = fil.read().splitlines()
            except FileNotFoundError:
                time.sleep(1)

        for i in range(len(filedata)):
            if "terrain_src_dir_gui" in filedata[i]:
                filedata[i] = "terrain_src_dir_gui=" + values['terrain_src_dir']
                break
            if i == len(filedata) - 1:
                filedata.append("terrain_src_dir_gui=" + values['terrain_src_dir'])

        filedata = list_to_string_file(filedata)
        with open(config, 'w') as file:
            file.write(filedata)


def init_docker(run_chain):
    if docker_installed:
        if "qgis-xtopo" in str(
                subprocess.check_output(['docker', 'ps'], stdin=subprocess.PIPE, stderr=subprocess.STDOUT)):
            if os.name == "posix":
                run_chain_filename = ''
                if run_chain:
                    run_chain_filename = 'run_chain.sh'
                    try:
                        os.remove(run_chain_filename)
                    except OSError:
                        pass
                    f = open(run_chain_filename, "w+")
                    f.write("#!/bin/bash\n")
                    f.write("docker exec --user user qgis-xtopo /app/init_docker.sh\n")
                    f.write("xhost +local:docker\n")
                    f.write("docker exec -it --user user qgis-xtopo /app/exec_qgis.sh\n")
                    f.close()
                    os.chmod(run_chain_filename, 0o755)
                terminal_command_params_list = get_terminal_command_params_list(
                    "docker exec --user user qgis-xtopo /app/init_docker.sh", run_chain_filename, False)
                subprocess.Popen(terminal_command_params_list).wait()
                try:
                    os.remove(run_chain_filename)
                except OSError:
                    pass
            else:
                if os.name == "nt":
                    subprocess.Popen(
                        ['cmd', '/c start /wait cmd /c docker exec --user user qgis-xtopo /app/init_docker.sh'],
                        shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).wait()
                    if run_chain:
                        run_qgis()


def get_terminal_command_params_list(cmd, run_chain_filename, hold):
    get_terminal_name()
    terminal_command_params_list = []
    if is_tool('xterm'):
        if run_chain_filename:
            terminal_command_params_list = ['xterm', '-hold', '-e', './' + run_chain_filename]
        else:
            if hold:
                terminal_command_params_list = ['xterm', '-hold', '-e', cmd]
            else:
                terminal_command_params_list = ['xterm', '-e', cmd]
    if get_terminal_name() == 'xfce4-terminal':
        if run_chain_filename:
            terminal_command_params_list = ['xfce4-terminal', '-H', '-e', './' + run_chain_filename]
        else:
            if hold:
                terminal_command_params_list = ['xfce4-terminal', '-H', '-e', cmd]
            else:
                terminal_command_params_list = ['xfce4-terminal', '-e', cmd]
    else:
        if get_terminal_name() == 'gnome-terminal':
            if run_chain_filename:
                terminal_command_params_list = ['gnome-terminal', '--', 'bash', '-c',
                                                './' + run_chain_filename + '; bash']
            else:
                if hold:
                    terminal_command_params_list = ['gnome-terminal', '--', 'bash', '-c',
                                                    cmd + '; bash']
                else:
                    terminal_command_params_list = ['gnome-terminal', '--', 'bash', '-c',
                                                    cmd]
        else:
            if get_terminal_name() == 'konsole':
                if run_chain_filename:
                    terminal_command_params_list = ['konsole', '--hold', '-e', './' + run_chain_filename]
                else:
                    if hold:
                        terminal_command_params_list = ['konsole', '--hold', '-e', cmd]
                    else:
                        terminal_command_params_list = ['konsole', '-e', cmd]
            else:
                if get_terminal_name() == 'terminator':
                    if run_chain_filename or hold:
                        terminal_command_params_list = ['terminator', '-e', './' + run_chain_filename]
                    else:
                        terminal_command_params_list = ['terminator', '-e', cmd]
                else:
                    if get_terminal_name() == 'lxterminal':
                        if run_chain_filename:
                            terminal_command_params_list = ['lxterminal',
                                                            '--command="/bin/bash -c \'./' + run_chain_filename + '; /bin/bash\'"']
                        else:
                            if hold:
                                terminal_command_params_list = ['lxterminal',
                                                                '--command="/bin/bash -c \'' + cmd + '; /bin/bash\'"']
                            else:
                                terminal_command_params_list = ['lxterminal', '--command="' + cmd + '"']

    list_terminals = "gnome-terminal, xfce4-terminal, konsole, terminator, lxterminal, xterm"
    if not terminal_command_params_list:
        sg.Popup(translations.get('no_terminal_found_error',
                                  'Terminal emulator is not found. Please install something from this list') + ": " + list_terminals,
                 title=translations.get('error', 'Error'))
    return terminal_command_params_list


def get_terminal_name():
    if is_tool('xfce4-terminal'):
        return 'xfce4-terminal'
    if is_tool('gnome-terminal'):
        return 'gnome-terminal'
    if is_tool('konsole'):
        return 'konsole'
    if is_tool('lxterminal'):
        return 'lxterminal'
    if is_tool('terminator'):
        return 'terminator'
    if is_tool('xterm'):
        return 'xterm'


def read_config_update_ui(values, config_dir, init):
    config_path = config_dir + slash_str + "config.ini"
    config_original_path = temp_dir
    if not os.path.isfile(config_original_path) or os.stat(config_original_path).st_size < 1:
        copy_config_original(config_original_path)
    if not os.path.isfile(config_path):
        if init:
            init_config(config_path, values)
    if os.path.isfile(config_path):
        print(translations.get('reading_config_from', 'Reading config from') + " " + config_path)
        window.Elem('bbox').update(get_setting(config_path, "bbox", config_original_path))
        update_layout_calc_tiles_list(get_setting(config_path, "bbox", config_original_path))
        window.Elem('project_name').update(get_setting(config_path, "project_name", config_original_path))
        window.Elem('terrain_input_dir').update(get_terrain_input_dir(values))
        overpass_instance_config = get_setting(config_path, "overpass_instance", config_original_path)
        overpass_endpoint_external = get_setting(config_path, "overpass_endpoint_external", config_original_path)
        terrain_src_dir_gui_setting = get_setting(config_path, 'terrain_src_dir_gui', config_original_path)
        if overpass_instance_config == "docker":
            window.Elem('docker').update(value=True)
            window.Elem('external').update(value=False)
            window.Elem('select_osm_files').update(disabled=False)
            window.Elem('open_protomaps').update(disabled=False)
            window.Elem('open_geofabrik').update(disabled=False)
            window.Elem('open_extract_bbike').update(disabled=False)
            window.Elem('open_osm_sbin').update(disabled=False)
        if overpass_instance_config == "external":
            window.Elem('external').update(value=True)
            window.Elem('docker').update(value=False)
            window.Elem('select_osm_files').update(disabled=True)
        if overpass_endpoint_external:
            window.Elem('overpass_endpoint_external').update(overpass_endpoint_external)
            if overpass_instance_config == "external":
                window.Elem('overpass_endpoint_external').update(disabled=False)
        if get_setting(config_path, "generate_terrain", config_original_path) == "true":
            window.Elem('generate_terrain').update(value=True)
            switch_layout_terrain(True)
            if get_setting(config_path, "download_terrain_tiles", config_original_path) == "false" and get_setting(
                    config_path,
                    "get_terrain_tiles",
                    config_original_path) == "false":
                window.Elem('download_terrain_tiles_manually').update(value=True)
        else:
            window.Elem('generate_terrain').update(value=False)
            switch_layout_terrain(False)
        if get_setting(config_path, "get_terrain_tiles", config_original_path) == "true":
            window.Elem('get_terrain_tiles').update(value=True)
            window.Elem('terrain_src_dir').update(disabled=False)
            window.Elem('terrain_src_dir_browse').update(disabled=False)
        else:
            window.Elem('get_terrain_tiles').update(value=False)
        if get_setting(config_path, "download_terrain_tiles", config_original_path) == "true":
            window.Elem('download_terrain_tiles').update(value=True)
        else:
            window.Elem('download_terrain_tiles').update(value=False)
        if terrain_src_dir_gui_setting:
            window.Elem('terrain_src_dir').update(terrain_src_dir_gui_setting)


def copy_config_original(config_original_path):
    command = "docker rm -f qgis-xtopo"
    runCommand(command, window)
    command = "docker run -dti --name qgis-xtopo"
    if os.path.isfile('config_debug.ini') or os.path.isfile('./../config_debug.ini'):
        command += ' ' + 'qgis-xtopo'
    else:
        command += ' ' + remote_repo_name
    runCommand(command, window)
    config_original = subprocess.check_output(['docker', 'exec', 'qgis-xtopo', 'cat', '/app/config.ini'],
                                              stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
    try:
        if os.path.isfile(config_original_path + slash_str + "config.original"):
            os.remove(config_original_path + slash_str + "config.original")
    except FileNotFoundError:
        pass
    config_original_filedata = config_original.decode("utf-8").splitlines()
    config_original_new_filedata = []
    for i in range(len(config_original_filedata)):
        config_original_new_filedata.append(config_original_filedata[i])
    config_original_new_filedata = list_to_string_file(config_original_new_filedata)
    with open(config_original_path + slash_str + "config.original", 'w') as file:
        file.write(config_original_new_filedata)


def update_layout_translations(values):
    window.Elem('qgis_projects_dir_text').update(translations.get('qgis_projects_dir', 'QGIS projects directory'))
    window.Elem('project_name_text').update(translations.get('project_name', 'Project name'))
    window.Elem('bbox_text').update(translations.get('bounding_box', 'Bounding box'))
    window.Elem('use_terrain_src_dir_text').update(translations.get('use_terrain_src_dir', 'Terrain source directory'))
    # window.Elem('overpass_instance_text').update(translations.get('overpass_instance', 'Overpass instance'))
    window.Elem('calc_tiles_list_text').update(translations.get('calc_tiles_list', 'List of required terrain tiles'))
    window.Elem('total_text').update(translations.get('total', 'Total') + ": ")
    window.Elem('generate_terrain_text').update(translations.get('generate_terrain', 'Process terrain'))
    window.Elem('download_terrain_tiles_manually_text').update(
        translations.get('download_terrain_tiles_manually', 'Manually download terrain'))
    window.Elem('download_terrain_tiles_text').update(
        translations.get('download_terrain_tiles', 'Automatically download terrain'))
    window.Elem('constructed_command_line_text').update(
        translations.get('constructed_command_line', 'Сommand line') + ":")
    window.Elem('start').update(text=translations.get('start', 'Run everything'))
    window.Elem('populate_db').update(text=translations.get('populate_db', 'Populate DB'))
    window.Elem('prepare_data').update(text=translations.get('prepare_data', 'Prepare data'))
    window.Elem('open_qgis').update(text=translations.get('open_qgis', 'Open QGIS'))
    window.Elem('exit').update(text=translations.get('exit', 'Exit'))
    window.Elem('internal_text').update(translations.get('internal', 'internal'))
    window.Elem('external_text').update(translations.get('external', 'external'))
    window.Elem('osm_data_source_text').update(
        translations.get('osm_data_source', 'OSM data source') + ": " + translations.get('overpass_instance',
                                                                                         'Overpass instance'))
    window.Elem('terrain').update(translations.get('terrain', 'Terrain'))
    window.Elem('free_space_text').update(translations.get('free', 'Free') + ":")
    window.Elem('free_space').update(
        str(get_free_space(values["qgis_projects_dir"])) + " " + translations.get('gb', 'Gb'))


def switch_layout_terrain(generate_terrain):
    if generate_terrain:
        window.Elem('use_terrain_src_dir_text').update(text_color="white")
        window.Elem('terrain_src_dir').update(disabled=True)
        window.Elem('terrain_src_dir_browse').update(disabled=True)
        window.Elem('get_terrain_tiles').update(disabled=False)
        window.Elem('download_terrain_tiles').update(disabled=False)
        window.Elem('download_terrain_tiles_text').update(text_color="white")
        window.Elem('download_terrain_tiles_manually').update(disabled=False)
        window.Elem('download_terrain_tiles_manually_text').update(text_color="white")
        window.Elem('open_terrain_input_dir').update(disabled=True)
    else:
        window.Elem('use_terrain_src_dir_text').update(text_color="#B6B4C3")
        window.Elem('terrain_src_dir').update(disabled=True)
        window.Elem('terrain_src_dir_browse').update(disabled=True)
        window.Elem('get_terrain_tiles').update(disabled=True)
        window.Elem('download_terrain_tiles').update(disabled=True)
        window.Elem('download_terrain_tiles_text').update(text_color="#B6B4C3")
        window.Elem('download_terrain_tiles_manually').update(disabled=True)
        window.Elem('download_terrain_tiles_manually_text').update(text_color="#B6B4C3")
    window.Elem('open_terrain_input_dir').update(disabled=True)


def get_setting(config_path, setting, config_original_path):
    value = read_setting(config_path, setting)
    if setting != 'terrain_src_dir_gui':
        if not value:
            if setting != 'bbox':
                print(setting + " " + "not found in" + " " + config_path + ". " + "Go back to the default setting.")
                return read_setting(config_original_path, setting).lower().strip()
            else:
                return ''
        else:
            return value.lower().strip()
    else:
        return value


def read_setting(path, setting):
    value = ''
    with open(path) as f:
        for number, line in enumerate(f, 1):
            value = None
            if setting + "=" in line:
                if str(line).strip().startswith(setting) and not str(line).startswith('#'):
                    line = str(line).strip()
                    if line[0:1] != "#":
                        value = line[len(setting) + 1:].replace('"', "").replace("'", "").replace("\n", "")
                        if value.rfind("#") > 0 and value.rfind(" #") > 0:
                            value = value[0:value.rfind(" #")]
                    break
    if not value:
        return None
    else:
        return value.lower().strip()


def init_config(path, values):
    if path + ".bak":
        try:
            os.remove(path + ".bak")
        except FileNotFoundError:
            pass
    if path:
        try:
            move(path, path + ".bak")
        except FileNotFoundError:
            pass
    if docker_installed:
        runCommand("docker rm -f qgis-xtopo", window)
    command_to_run = "docker "
    qgis_projects_dir = values['qgis_projects_dir']
    project_name = values['project_name']
    params = 'run -dti --rm '
    params += f"--name qgis-xtopo "
    if project_name:
        params += f"-e PROJECT_NAME_EXT={project_name} "
    if qgis_projects_dir:
        params += f"--mount type=bind,source={qgis_projects_dir},target=/mnt/qgis_projects "
    if os.path.isfile('config_debug.ini') or os.path.isfile('./../config_debug.ini'):
        params += 'qgis-xtopo'
    else:
        params += remote_repo_name
    command = command_to_run + params
    runCommand(cmd=command, window=window)
    init_docker(False)
    # start(values, False)


def compose_params(values, run_chain):
    project_name = values['project_name']
    bbox = values['bbox']
    generate_terrain = values['generate_terrain']
    download_terrain_tiles = values['download_terrain_tiles']
    qgis_projects_dir = values['qgis_projects_dir']
    use_terrain_src_dir = values['get_terrain_tiles']

    params = 'run -dti --rm '
    if project_name:
        params += f"-e PROJECT_NAME_EXT={project_name} "
    if bbox:
        params += f'-e BBOX_STR="{bbox}" '
    params += f"-e OVERPASS_INSTANCE={([key for key in r_keys if values[key]][0])} "
    if values[r_keys[1]]:
        params += f"-e OVERPASS_ENDPOINT_EXTERNAL=\"{values['overpass_endpoint_external']}\" "
    params += f"-e GENERATE_TERRAIN={str(generate_terrain).lower()} "
    params += f"-e DOWNLOAD_TERRAIN_DATA={str(download_terrain_tiles).lower()} "
    if run_chain:
        params += f"-e RUN_CHAIN={str(run_chain).lower()} "
    lang = locale.getlocale(locale.LC_CTYPE)
    params += f"-e DISPLAY "
    if os.name == "posix":
        params += f"-v /tmp/.X11-unix:/tmp/.X11-unix "
        params += f"-e LANG={lang[0]}.{lang[1]} "
    if os.name == "nt":
        import ctypes
        windll = ctypes.windll.kernel32
        params += f"-e LANG={locale.windows_locale[windll.GetUserDefaultUILanguage()]} "
    params += f"--name qgis-xtopo "
    if qgis_projects_dir:
        params += f"--mount type=bind,source={qgis_projects_dir},target=/mnt/qgis_projects "
    if use_terrain_src_dir and values['terrain_src_dir']:
        params += f"--mount type=bind,source={values['terrain_src_dir']},target=/mnt/terrain "
    if os.path.isfile('config_debug.ini') or os.path.isfile('./../config_debug.ini'):
        params += 'qgis-xtopo'
    else:
        params += remote_repo_name
    return params


def check_parameters(values, osm_data_dir):
    qgis_projects_dir = values['qgis_projects_dir']
    terrain_src_dir = values['terrain_src_dir']
    bbox = values["bbox"]
    project_name = values["project_name"]
    osm_files = values["osm_files"]
    terrain_input_dir = get_terrain_input_dir(values)
    overpass_endpoint_external = values['overpass_endpoint_external']
    if len(qgis_projects_dir) < 5:
        sg.Popup(translations.get('projects_directory_empty_error', 'Projects directory path is empty'),
                 title=translations.get('error', 'Error'))
        return False
    if " " in qgis_projects_dir:
        sg.Popup(
            translations.get('projects_directory_spaces_error', 'Projects directory path should not contain spaces'),
            title=translations.get('error', 'Error'))
        return False
    if not os.path.isdir(qgis_projects_dir):
        try:
            os.makedirs(qgis_projects_dir, exist_ok=True)
        except OSError:
            sg.Popup(translations.get('directory', 'Directory') + " " + qgis_projects_dir + " " + translations.get(
                'can_not_be_created', 'can not be created'))
            return False
    if len(project_name) == 0:
        sg.Popup(translations.get('project_name_empty_error', 'Project name is empty'),
                 title=translations.get('error', 'Error'))
        return False
    if " " in project_name:
        sg.Popup(translations.get('project_name_spaces_error', 'Project name should not contain spaces'),
                 title=translations.get('error', 'Error'))
        return False

    if values['generate_terrain'] and values[terrain_radio_keys[0]]:
        if " " in terrain_src_dir:
            sg.Popup(
                translations.get('terrain_src_dir_spaces_error', 'Terrain source directory should not contain spaces'),
                title=translations.get('error', 'Error'))
            return False
        if len(terrain_src_dir) != 0:
            if not os.path.isdir(terrain_src_dir):
                sg.Popup(
                    translations.get('terrain_src_dir_doesnt_exists_error', 'Terrain source directory does not exist'),
                    title=translations.get('error', 'Error'))
                return False
            else:
                if not check_terrain_data_is_present(terrain_src_dir):
                    sg.Popup(translations.get('terrain_src_dir_empty_error',
                                              'Terrain source directory is empty'),
                             title=translations.get('error', 'Error'))
                    return False
        else:
            sg.Popup(translations.get('terrain_src_dir_path_empty_error', 'Terrain source directory path is empty'),
                     title=translations.get('error', 'Error'))
            return False

    if len(bbox) == 0:
        sg.Popup(translations.get('bounding_box_empty_error', 'Bounding box is empty'),
                 title=translations.get('error', 'Error'))
        return False
    if len(bbox) >= 7:
        if "openstreetmap" not in bbox:
            if check_bbox(bbox) is False:
                throw_bbox_error(translations)
                return False
    else:
        throw_bbox_error(translations)
        return False
    if " " in bbox:
        sg.Popup(translations.get('bounding_box_spaces_error', 'Bounding box should not contain spaces'),
                 title=translations.get('error', 'Error'))
        return False
    if ([key for key in r_keys if values[key]][0]) == "external":
        if "/" not in overpass_endpoint_external or "api/interpreter" not in overpass_endpoint_external:
            sg.Popup(translations.get('invalid_overpass_endpoint_external_error', 'Invalid Overpass external endpoint'),
                     title=translations.get('error', 'Error'))
            return False

    osm_files_list = str(osm_files).split(";")
    if not os.path.isdir(osm_data_dir):
        start(values, False)
    if values[r_keys[0]] and not osm_files_list[0] and not check_osm_data_is_present(osm_data_dir):
        if not os.path.isfile(values['qgis_projects_dir'] + slash_str + "overpass_db" + slash_str + "nodes.map"):
            sg.Popup(translations.get('no_osm_data_found_error', 'OSM data not found.\nDownload and specify them in the'
                                                                 ' settings or place to') + ' ' + osm_data_dir + '\n' +
                     translations.get('or_use_external_overpass_instance', 'or use external Overpass instance'),
                     title=translations.get('error', 'Error'))
            return False
    if values['generate_terrain'] and values[
        terrain_radio_keys[2]] and not check_terrain_data_is_present(terrain_input_dir):
        sg.Popup(translations.get('terrain_input_dir_empty_error', 'You have selected "Download terrain manually" but '
                                                                   'terrain directory is empty. Download the data and'
                                                                   ' place it in the following directory.'
                                  ),
                 title=translations.get('error', 'Error'))
        webbrowser.open(os.path.realpath(terrain_input_dir))
        return False


def num(s):
    try:
        return float(s)
    except ValueError:
        return False


def check_bbox(bbox_str):
    bbox_list = bbox_str.replace(" ", "").split(',')
    if len(bbox_list) != 4:
        return False
    else:
        lon_min = bbox_list[0]  # (W) left
        lat_min = bbox_list[1]  # (S) bottom
        lon_max = bbox_list[2]  # (E) right
        lat_max = bbox_list[3]  # (N) top
        if num(lon_min) > num(lon_max) or num(lat_min) > num(lat_max) or num(lat_max) >= 90 or num(lat_min) <= -90 or \
                num(lon_min) <= -180 or num(lon_max) >= 180:
            return False
    return True


def throw_bbox_error(translations):
    sg.Popup(translations.get('invalid_bbox_error',
                              'Invalid bbox format. Use openstreetmap.org link or comma separated left,bottom,right,top'),
             title=translations.get('error', 'Error'))


def runCommand(cmd, window=None):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)
    output = ''
    for line in p.stdout:
        line = line.decode(errors='replace' if sys.version_info < (3, 5) else 'backslashreplace').rstrip()
        output += line
        print(line)
        window.refresh() if window else None

    retval = p.wait(None)
    return retval, output


if __name__ == '__main__':
    main()
